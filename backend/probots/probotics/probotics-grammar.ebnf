@@grammar::Probotics
@@parseinfo::True

@@comments::/\/\*.*?\*\//
@@eol_comments::/(#|\/\/).*?$/

@@keyword::else
@@keyword::false
@@keyword::if
@@keyword::none
@@keyword::null
@@keyword::true


start = {expression | comment}* $ ;

expression::Expression =
           | addition
           | subtraction
           | term
           ;

addition::Addition = left:expression op:'+' ~ right:term ;
subtraction::Subtraction = left:expression op:'-' ~ right:term ;

term::Term =
     | multiplication
     | division
     | factor
     ;

multiplication::Multiplication = left:term op:'*' ~ right:factor ;
division::Division = left:term op:'/' ~ right:factor ;

factor::Factor =
       | subexpression
       | number
       | string
       | bool
       | null
       | symbol
       ;

subexpression = '(' ~ @:expression ')' ;

number::Number = /(0|[1-9][0-9]*)(\.[0-9]+)?/ ;

string::String = /("[^\"]*"|'[^\']*')/ ;

bool::Bool = "true" | "false" ;

null::Null = "null" | "none" ;

@name
symbol::Symbol = /[a-zA-Z_][a-zA-Z0-9_]*/ ;


# It's not clear to me why comments must be explictly defined. The docs
# say the the skip rule (_) below will skip comments, but it doesn't seem to
comment::Comment =
       | eol_comment
       | block_comment
       ;
eol_comment = "#" ~ /[^\n]*/ | "//" ~ /[^\n]*/ ;
block_comment = /\/\*.*?\*\// ;

# Skip rule for EOL comments, block comments, and whitespace
_ = /#.*?$|\/\/.*?|\/\*.*?\*\/|\s+/ ;  # Skip EOL comments, block comments, and whitespace

(*
command_list = {command}+ ;

command = assignment
        | if_statement
        | while_loop
        | simple_command
        | expression
        ;

assignment = (symbol | property_access) ":=" ( expression | block | block_with_arguments ) ;

if_statement = "if" condition block {"else" if_statement | "else" block}* ;

while_loop = "while" condition block ;

block = "{" command_list "}" ;

block_with_arguments = "{" symbol_list newline command_list "}" ;

condition = expression [comparison_op expression] ;

comparison_op = "==" | "!=" | "<" | ">" | "<=" | ">=" ;

property_access = target:symbol "." ~ property:SYMBOL ;


call = symbol "(" ~ {expression {"," expression}*}* ")" ;

simple_command = symbol {expression}* ;

symbol_list = symbol {"," symbol}* ;



*)